server:
  port: 50000

spring:
  application:
    name: hystrix-fallback
  main:
    # 由于 MyService extends IService，这里就会产生 2 个 @FeignClient ，会产生同名的 bean 定义，所以使用 MyService 的定义覆盖
    allow-bean-definition-overriding: true

eureka:
  client:
    # 服务注册中心地址
    service-url:
      defaultZone: http://localhost:20000/eureka


feign:
  hystrix:
    # 开启 feign 的 hystrix 功能
    enabled: true

hystrix:
  command:
    # 全局配置
    default:
      fallback:
        # 是否开启服务降级
        enabled: true
      # 执行
      execution:
        # 执行超时开启
        timeout:
          enabled: true
        # 隔离
        isolation:
          # 线程
          thread:
            # 超时毫秒
            timeoutInMilliseconds: 2000
            # 超时以后终止线程
            interrupOnTimeout: true
            # 此属性指示 HystrixCommand.run() 发生取消时是否应中断执行。
            interruptOnCancel: true

# hystrix 的超时配置了，但是 feign 底层使用了 Ribbon 做重试，还有一些超时的操作
# 他们的时间是会冲突的，将这里的重试干掉，并且将超时时间设置得大一些，否则 hystrix 的没超时，Ribbon 就超时了，就达不到测试 hystrix 的效果
# 后面会一个章节讲解如何处理这种情况
feign-client:
  ribbon:
    # 每台机器最大重试次数
    MaxAutoRetries: 0
    # 可以重试几台机器（第一台失败后，还可以换 2 台进行重试）
    MaxAutoRetriesNextServer: 0
    # 链接超时：http 请求会先链接，链接成功后，才会传递业务数据
    ConnectTimeout: 1000
    # 业务处理超时时间，没有响应数据的话
    ReadTimeout: 8000
    # 是否在所有的 HTTP METHOD 进行重试
    # 默认的话，仅在 get
    OkToRetryOnAllOperations: false

