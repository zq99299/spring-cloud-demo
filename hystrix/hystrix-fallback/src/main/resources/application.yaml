server:
  port: 50000

spring:
  application:
    name: hystrix-fallback
  main:
    # 由于 MyService extends IService，这里就会产生 2 个 @FeignClient ，会产生同名的 bean 定义，所以使用 MyService 的定义覆盖
    allow-bean-definition-overriding: true

eureka:
  client:
    # 服务注册中心地址
    service-url:
      defaultZone: http://localhost:20000/eureka


feign:
  hystrix:
    # 开启 feign 的 hystrix 功能
    enabled: true

hystrix:
  command:
    # 全局配置
    default:
      fallback:
        # 是否开启服务降级
        enabled: true
      # 执行
      execution:
        # 执行超时开启
        timeout:
          enabled: true
        # 隔离
        isolation:
          # 线程
          thread:
            # 超时毫秒
            timeoutInMilliseconds: 1000
            # 超时以后终止线程
            interrupOnTimeout: true
            # 此属性指示 HystrixCommand.run() 发生取消时是否应中断执行。
            interruptOnCancel: true
      requestCache:
        # 默认是打开的
        enable: true


      circuitBreaker:
        # === 下面的参数不是特别重要的，是一些开关参数
        # 开启熔断器，默认也是开启
        enabled: true
        # 强制开启熔断器
        forceOpen: false
        # 强制关闭熔断器
        forceClosed: false

        # === 影响到熔断器判定之类的重要参数
        # 熔断的前提条件(请求数量)，在一定的时间窗口内，请求达到 n 个以后，才会进入熔断判断
        requestVolumeThreshold: 5
        # 超过百分之 50 的失败请求，则熔断开关开启
        errorThresholdPercentage: 50
        # 在 n 毫秒后，将熔断器状态变成 半开状态，一般会小于时间窗口
        sleepWindowInMilliseconds: 15000
      # === 影响到熔断器判定之类的重要参数
      # metrics 就是统计指标
      metrics:
        rollingStats:
          # 以  20 秒作为一个时间统计窗口
          timeInMilliseconds: 20000

# hystrix 的超时配置了，但是 feign 底层使用了 Ribbon 做重试，还有一些超时的操作
# 他们的时间是会冲突的，将这里的重试干掉，并且将超时时间设置得大一些，否则 hystrix 的没超时，Ribbon 就超时了，就达不到测试 hystrix 的效果
# 后面会一个章节讲解如何处理这种情况
feign-client:
  ribbon:
    # 每台机器最大重试次数
    MaxAutoRetries: 0
    # 可以重试几台机器（第一台失败后，还可以换 2 台进行重试）
    MaxAutoRetriesNextServer: 0
    # 链接超时：http 请求会先链接，链接成功后，才会传递业务数据
    ConnectTimeout: 1000
    # 业务处理超时时间，没有响应数据的话
    ReadTimeout: 8000
    # 是否在所有的 HTTP METHOD 进行重试
    # 默认的话，仅在 get
    OkToRetryOnAllOperations: false


# actuator 暴露接口
management:
  # 没有这个功能呀
  #  security.nabled: false
  endpoints:
    web:
      exposure:
        # 暴露接口
        # include: "*"  # 可以采用这种方式暴露所有的端口
        include:
          # actuator 会暴露 /actuator/hystrix.stream 端口
          # 通过这个地址可以获取到 Hystrix 指标流
          - hystrix.stream
  endpoint:
    health:
      show-details: always
