server:
  port: 63000

spring:
  application:
    name: stream-sample
  # rabbit mq 配置
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest

  cloud:
    stream:
      # 这里是全局配置，也可以按 channel 配置，比如 spring.cloud.stream.bindings.foo.consumer.instance-count
      # 当前消费者实例总数
      instance-count: 2
      # 这里是全局配置，也可以按 channel 配置，比如 spring.cloud.stream.bindings.foo.consumer.instance-index
      # 当前实例的索引号，最大值为 instance-count - 1
      instance-index: 0
      bindings:

        # 这里指定的是 channel 的名称
        myTopic-consumer:
          # 绑定到物理的 Exchange 名称
          destination: broadcast
        myTopic-producer:
          destination: broadcast

        #### 消息分组示例
        group-consumer:
          destination: group-topic
          # 分组是对消费者来说的，因为需要消费者处理消息
          group: groupA
          # 分区功能也是针对于消费者
          consumer:
            # 消费者是否从分区生产者接收数据
            partitioned: true
        group-producer:
          destination: group-topic
          # 生产者消费分区配置
          producer:
            # 分区数量
            partitionCount: 2
            # key 表达式，Key resolver; 表达式可以使用 SpEL 表达式
            # 只有索引参数为 1 的节点（消费者）才能消费消息
            # partitionKeyExpression: "1"
            partitionKeyExpression: payload

        #### 延迟实例
        delayed-consumer:
          destination: delayed-topic
        delayed-producer:
          destination: delayed-topic

        #～～～～～～～  本地重试
        # 这里指定的是 channel 的名称
        error-consumer:
          # 绑定到物理的 Exchange 名称
          destination: errorTopic
          # 本机重试（单机版，并不是把消息发送给 MQ，再重试的）
          consumer:
            # 最大重试次数
            # 次数等于 1 相当于不重试（消息消费算一次）
            maxAttempts: 2
        errorTopic-producer:
          destination: errorTopic

        #～～～～～～～ re-queue 重回队列重试
        requeue-consumer:
          destination: requeueTopic
          group: requeueGroup
          consumer:
            # 禁用本地重试功能
            maxAttempts: 1
        requeue-producer:
          destination: requeueTopic
          group: requeueGroup

      # 针对 rabbit 进行配置
      rabbit:
        bindings:
          # 这里将 delayed-producer 通道进行配置
          delayed-producer:
            producer:
              # 是否应该使用延迟消息交换器
              delayedExchange: true

          # 重回队列配置
          requeue-consumer:
            consumer:
              # 重新排队拒绝的消息
              requeueRejected: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always